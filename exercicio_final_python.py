# -*- coding: utf-8 -*-
"""Exercício_final_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LD4hhc4ZMu8lW8b7LEMOjnYVAOlcYKb

# Exercício avaliativo de Python Basic

1. Crie uma classe enviarMensagens que tenha como variável padrão para inicialização a mensagem (Deve estar no __init__)


*   a classe deve ter um método enviar email com parâmetros email e titulo e estes serão usados na biblioteca de envio de email
*   Use a biblioteca smtplib
"""

#Criar aqui a classe
import smtplib

class enviarMensagens:
  def __init__(self, mensagem):
    self.mensagem = mensagem

  def enviar_email(self, email, titulo):
    self.email = email
    self.titulo = titulo
    sender = "Private Person <from@example.com>"
    receiver = self.email
    
    message = f"""\
    Subject: {self.titulo}
    To: {self.email}
    From: {sender}

    {self.mensagem} """
    
    with smtplib.SMTP("sandbox.smtp.mailtrap.io", 2525) as server:
      server.login("090be20389e5fd", "412f9b66cab889")
      server.sendmail(sender, receiver, message)

nova_mensagem = enviarMensagens("teste msg")
nova_mensagem.enviar_email("Receiver <receiver@mailtrap.io", "SMTP Notification")

"""2. Crie uma classe com os seguintes métodos:
 

*   verificar_servidor (Use o socket) como parâmetro, o método usa o ip/dominio e a porta, deve salvar em um arquivo csv dia e hora e o resultado ( se conseguiu ou não), por fim, deve enviar email caso tenha dado errado.
*   verificar_portas (Use o nmap) como parâmetro, insira o dominio para teste e o resultado deve ser salvo em um arquivo csv para analises
*   realizar_ping (use uma lib de ping de sua preferência) como parâmetro entre o ip/domínio e salve o resultado em um arquivo csv, caso tenha erro no ping, envie email informando o erro, o dia e hora do ocorrido.


---


**ps.: os dados não podem ser apagados e sim inseridos ao final do arquivo**




"""

# Criar aqui a classe
from ping3 import ping, verbose_ping
from socket import *
import nmap3, datetime, csv

class Varredura:
  def __init__(self, ip):
    self.servidor = ip

  def verificar_servidor(self):
    ip_host = gethostbyname(self.servidor)

    f = open('resultado_socket.csv', 'a')
    writer = csv.writer(f)

    resultado_socket = []

    for i in range(80, 85):
      s = socket(AF_INET, SOCK_STREAM)
      conn = s.connect_ex((ip_host, i))
      if(conn == 0):
        now = datetime.datetime.now()
        resultado_socket.append(now)
        resultado_socket.append(i)
        resultado_socket.append("Aberta")
      else:
        now = datetime.datetime.now()
        resultado_socket.append(now)
        resultado_socket.append(i)
        resultado_socket.append("Fechada")

        msg = f"""
          Sem comunicacao na porta {i}
          Data: {now}
        """
        return print(msg)
        nova_mensagem = enviarMensagens(msg)
        nova_mensagem.enviar_email("Receiver <receiver@mailtrap.io", "Scan Port")

      s.close()
      f.close()
  
  def verificar_portas(self):
    nmap = nmap3.Nmap()
    resultado_nmap = []
    rnmap = nmap.scan_top_ports(self.servidor)
    resultado_nmap.append(rnmap)

    f = open('resultado_nmap.csv', 'a')
    writer = csv.writer(f)
    writer.writerow(resultado_nmap)
    f.close()

  def realizar_ping(self):
    
    resultado_ping = []
    resultado = ping(self.servidor)
    resultado_ping.append(self.servidor)
    resultado_ping.append(resultado)

    header = ['SERVIDOR', 'RESULTADO']

    f = open('resultado_ping.csv', 'a')
    writer = csv.writer(f)
    #writer.writerow(header)
    writer.writerow(resultado_ping)
    f.close
    
    if resultado == False:
      now = datetime.datetime.now()
      msg = f"""
        Sem comunicacao com o servidor {self.servidor}
        Data: {now}
        Erro: {resultado_ping}
      """
      return print(msg)
      nova_mensagem = enviarMensagens(msg)
      nova_mensagem.enviar_email("Receiver <receiver@mailtrap.io", "Falha de Ping")

"""Rode o programa, verificando o servidor, as portas abertas e vendo o ping com o seguintes IP´s/DOminos
dominios_ips = ['186.202.153.153', 'www.google.com.br', 'minhacasa.edu.br']
"""

# Rode aqui seu código

# Host: 186.202.153.153
host1 = Varredura('186.202.153.153')
host1.verificar_servidor()
host1.verificar_portas()
host1.realizar_ping()

# Host: google.com.br
host2 = Varredura('google.com.br')
host2.verificar_servidor()
host2.verificar_portas()
host2.realizar_ping()

# Host: minhacasa.edu.br
host3 = Varredura('minhacasa.edu.br')
host3.verificar_servidor()
host3.verificar_portas()
host3.realizar_ping()